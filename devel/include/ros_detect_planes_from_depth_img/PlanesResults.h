// Generated by gencpp from file ros_detect_planes_from_depth_img/PlanesResults.msg
// DO NOT EDIT!


#ifndef ROS_DETECT_PLANES_FROM_DEPTH_IMG_MESSAGE_PLANESRESULTS_H
#define ROS_DETECT_PLANES_FROM_DEPTH_IMG_MESSAGE_PLANESRESULTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_detect_planes_from_depth_img
{
template <class ContainerAllocator>
struct PlanesResults_
{
  typedef PlanesResults_<ContainerAllocator> Type;

  PlanesResults_()
    : N(0)
    , norms()
    , center_3d()
    , center_2d()
    , mask_color()  {
    }
  PlanesResults_(const ContainerAllocator& _alloc)
    : N(0)
    , norms(_alloc)
    , center_3d(_alloc)
    , center_2d(_alloc)
    , mask_color(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _N_type;
  _N_type N;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _norms_type;
  _norms_type norms;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _center_3d_type;
  _center_3d_type center_3d;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _center_2d_type;
  _center_2d_type center_2d;

   typedef std::vector<uint16_t, typename ContainerAllocator::template rebind<uint16_t>::other >  _mask_color_type;
  _mask_color_type mask_color;





  typedef boost::shared_ptr< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> const> ConstPtr;

}; // struct PlanesResults_

typedef ::ros_detect_planes_from_depth_img::PlanesResults_<std::allocator<void> > PlanesResults;

typedef boost::shared_ptr< ::ros_detect_planes_from_depth_img::PlanesResults > PlanesResultsPtr;
typedef boost::shared_ptr< ::ros_detect_planes_from_depth_img::PlanesResults const> PlanesResultsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator1> & lhs, const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator2> & rhs)
{
  return lhs.N == rhs.N &&
    lhs.norms == rhs.norms &&
    lhs.center_3d == rhs.center_3d &&
    lhs.center_2d == rhs.center_2d &&
    lhs.mask_color == rhs.mask_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator1> & lhs, const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_detect_planes_from_depth_img

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1490bcb974cae216e975f12f5d851b8";
  }

  static const char* value(const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1490bcb974cae21ULL;
  static const uint64_t static_value2 = 0x6e975f12f5d851b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_detect_planes_from_depth_img/PlanesResults";
  }

  static const char* value(const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 N                 # Number of detected planes.\n"
"\n"
"# In the following arrays, \n"
"# the planes' parameters are concatinated one by one.\n"
"\n"
"float32[] norms         # Nx3. Plane normal (nx, ny, nz).\n"
"float32[] center_3d     # Nx3. Plane 3D center (cx, cy, cz).\n"
"float32[] center_2d     # Nx2. Plane 2D center on the image (px, py),\n"
"                        #   which means {px}th column, and {py}th row.\n"
"uint16[] mask_color     # Nx3. Plane mask color (blue, green, red). \n"
"                        # Each color's range is [0, 255]\n"
;
  }

  static const char* value(const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.N);
      stream.next(m.norms);
      stream.next(m.center_3d);
      stream.next(m.center_2d);
      stream.next(m.mask_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlanesResults_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_detect_planes_from_depth_img::PlanesResults_<ContainerAllocator>& v)
  {
    s << indent << "N: ";
    Printer<int32_t>::stream(s, indent + "  ", v.N);
    s << indent << "norms[]" << std::endl;
    for (size_t i = 0; i < v.norms.size(); ++i)
    {
      s << indent << "  norms[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.norms[i]);
    }
    s << indent << "center_3d[]" << std::endl;
    for (size_t i = 0; i < v.center_3d.size(); ++i)
    {
      s << indent << "  center_3d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_3d[i]);
    }
    s << indent << "center_2d[]" << std::endl;
    for (size_t i = 0; i < v.center_2d.size(); ++i)
    {
      s << indent << "  center_2d[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.center_2d[i]);
    }
    s << indent << "mask_color[]" << std::endl;
    for (size_t i = 0; i < v.mask_color.size(); ++i)
    {
      s << indent << "  mask_color[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.mask_color[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_DETECT_PLANES_FROM_DEPTH_IMG_MESSAGE_PLANESRESULTS_H
